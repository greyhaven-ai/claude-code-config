{
  "// statusline-examples": "Various statusline configurations for Claude Code",
  "// instructions": "Copy one of these configurations to your .claude/settings.json file",
  
  "minimal": {
    "// description": "Minimal statusline with just model and directory",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); echo \"[$(echo \"$input\" | jq -r \".model.display_name\")] $(basename $(echo \"$input\" | jq -r \".workspace.current_dir\"))\"'",
      "padding": 0
    }
  },

  "git-aware": {
    "// description": "Shows model, directory, and git branch",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); BRANCH=$(git branch --show-current 2>/dev/null || echo \"\"); if [ -n \"$BRANCH\" ]; then BRANCH=\" | 🌿 $BRANCH\"; fi; echo \"[$MODEL] 📁 $DIR$BRANCH\"'",
      "padding": 0
    }
  },

  "cost-aware": {
    "// description": "Shows model, cost, and session duration",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); COST=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0\" | xargs printf \"%.4f\"); DURATION=$(echo \"$input\" | jq -r \".cost.total_duration_ms // 0\"); MINUTES=$((DURATION / 60000)); SECONDS=$(((DURATION % 60000) / 1000)); echo \"[$MODEL] 💰 \\$$COST | ⏱️ ${MINUTES}m ${SECONDS}s\"'",
      "padding": 0
    }
  },

  "development-focused": {
    "// description": "Shows model, git status, lines changed, and directory",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); ADDED=$(echo \"$input\" | jq -r \".cost.total_lines_added // 0\"); REMOVED=$(echo \"$input\" | jq -r \".cost.total_lines_removed // 0\"); BRANCH=$(git branch --show-current 2>/dev/null || echo \"no-git\"); echo \"[$MODEL] 🌿 $BRANCH | 📁 $DIR | +$ADDED/-$REMOVED\"'",
      "padding": 0
    }
  },

  "colorful": {
    "// description": "Colorful statusline with ANSI codes",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); COST=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0\" | xargs printf \"%.4f\"); echo -e \"\\033[1;36m[$MODEL]\\033[0m \\033[1;33m📁 $DIR\\033[0m \\033[1;32m💰 \\$$COST\\033[0m\"'",
      "padding": 0
    }
  },

  "performance-monitor": {
    "// description": "Shows API performance metrics",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); API_MS=$(echo \"$input\" | jq -r \".cost.total_api_duration_ms // 0\"); TOTAL_MS=$(echo \"$input\" | jq -r \".cost.total_duration_ms // 0\"); if [ \"$TOTAL_MS\" -gt 0 ]; then PERF=$((API_MS * 100 / TOTAL_MS)); else PERF=0; fi; echo \"[$MODEL] ⚡ API: ${API_MS}ms (${PERF}% of total)\"'",
      "padding": 0
    }
  },

  "grey-haven-branded": {
    "// description": "Custom Grey Haven Studio branded statusline",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); BRANCH=$(git branch --show-current 2>/dev/null || echo \"main\"); echo \"🏰 Grey Haven | [$MODEL] | 🌿 $BRANCH | 📁 $DIR\"'",
      "padding": 0
    }
  },

  "environment-aware": {
    "// description": "Shows different colors/emojis based on directory context",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); CWD=$(echo \"$input\" | jq -r \".workspace.current_dir\"); DIR=$(basename \"$CWD\"); if [[ \"$CWD\" == */production/* ]]; then ENV=\"🔴 PROD\"; elif [[ \"$CWD\" == */staging/* ]]; then ENV=\"🟡 STAGE\"; elif [[ \"$CWD\" == */test/* ]]; then ENV=\"🟢 TEST\"; else ENV=\"🔵 DEV\"; fi; echo \"[$MODEL] $ENV | 📁 $DIR\"'",
      "padding": 0
    }
  },

  "smart-context": {
    "// description": "Shows context usage as a progress bar",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); COST=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0\" | xargs printf \"%.2f\"); PCT=$(($(echo \"$COST * 20\" | bc | cut -d. -f1))); if [ $PCT -gt 100 ]; then PCT=100; fi; BAR=\"\"; for i in $(seq 1 10); do if [ $((i * 10)) -le $PCT ]; then BAR=\"${BAR}█\"; else BAR=\"${BAR}░\"; fi; done; echo \"[$MODEL] Context: [$BAR] \\$$COST\"'",
      "padding": 0
    }
  },

  "time-tracker": {
    "// description": "Shows current time and session duration",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); TIME=$(date +\"%H:%M\"); DURATION=$(echo \"$input\" | jq -r \".cost.total_duration_ms // 0\"); MINUTES=$((DURATION / 60000)); echo \"[$MODEL] 🕐 $TIME | Session: ${MINUTES}m\"'",
      "padding": 0
    }
  },

  "productivity-metrics": {
    "// description": "Shows lines of code changed and productivity metrics",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); ADDED=$(echo \"$input\" | jq -r \".cost.total_lines_added // 0\"); REMOVED=$(echo \"$input\" | jq -r \".cost.total_lines_removed // 0\"); NET=$((ADDED - REMOVED)); COST=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0.0001\" | xargs printf \"%.4f\"); if [ \"$ADDED\" -gt 0 ]; then CPL=$(echo \"scale=4; $COST / $ADDED\" | bc); else CPL=\"0\"; fi; echo \"[$MODEL] 📊 +$ADDED/-$REMOVED (net: $NET) | \\$${CPL}/line\"'",
      "padding": 0
    }
  },

  "model-specific-colors": {
    "// description": "Different colors for different models",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); case \"$MODEL\" in Opus) COLOR=\"\\033[95m\" EMOJI=\"🧠\";; Sonnet) COLOR=\"\\033[94m\" EMOJI=\"🎵\";; Haiku) COLOR=\"\\033[92m\" EMOJI=\"🍃\";; *) COLOR=\"\\033[90m\" EMOJI=\"🤖\";; esac; echo -e \"${COLOR}${EMOJI} $MODEL\\033[0m | 📁 $DIR\"'",
      "padding": 0
    }
  },

  "git-dirty-status": {
    "// description": "Shows git status with dirty/clean indicators",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); DIR=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); if git diff --quiet 2>/dev/null; then GIT=\"✅\"; else GIT=\"🔴\"; fi; BRANCH=$(git branch --show-current 2>/dev/null || echo \"no-git\"); echo \"[$MODEL] $GIT $BRANCH | 📁 $DIR\"'",
      "padding": 0
    }
  },

  "compact-all-info": {
    "// description": "Compact view with all key information",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); M=$(echo \"$input\" | jq -r \".model.display_name\" | cut -c1-3); D=$(basename $(echo \"$input\" | jq -r \".workspace.current_dir\")); C=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0\" | xargs printf \"%.2f\"); B=$(git branch --show-current 2>/dev/null | cut -c1-10 || echo \"none\"); A=$(echo \"$input\" | jq -r \".cost.total_lines_added // 0\"); echo \"$M|$B|$D|+$A|\\$$C\"'",
      "padding": 0
    }
  },

  "emoji-status": {
    "// description": "Uses emojis to convey status at a glance",
    "statusLine": {
      "type": "command",
      "command": "bash -c 'input=$(cat); MODEL=$(echo \"$input\" | jq -r \".model.display_name\"); COST=$(echo \"$input\" | jq -r \".cost.total_cost_usd // 0\"); if (( $(echo \"$COST > 1.0\" | bc -l) )); then COST_EMOJI=\"💸\"; elif (( $(echo \"$COST > 0.5\" | bc -l) )); then COST_EMOJI=\"💵\"; else COST_EMOJI=\"💰\"; fi; if git diff --quiet 2>/dev/null; then GIT_EMOJI=\"✨\"; else GIT_EMOJI=\"🚧\"; fi; echo \"[$MODEL] $GIT_EMOJI $COST_EMOJI\"'",
      "padding": 0
    }
  }
}