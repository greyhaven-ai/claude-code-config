#!/usr/bin/env python3
"""
Claude Config CLI v2.0.0 - Hooks and Configuration Setup

Focused on:
- Hook installation and management
- MCP server configuration
- Project initialization
- Settings backup/restore
"""

import json
import shutil
import subprocess
import os
import sys
from pathlib import Path
from typing import List, Optional, Dict, Any
import argparse
from datetime import datetime

# Version info
VERSION = "2.0.0"

# ANSI color codes for terminal output
class Colors:
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    CYAN = '\033[96m'
    END = '\033[0m'

class ClaudeConfigManager:
    """Hooks and configuration manager for Claude Code"""

    def __init__(self):
        # Check if running from global installation
        if os.environ.get('CLAUDE_CONFIG_GLOBAL'):
            self.repo_dir = Path(os.environ.get('CLAUDE_CONFIG_HOME', Path.home() / '.claude-config'))
        else:
            self.repo_dir = Path(__file__).parent

        self.hooks_dir = self.repo_dir / '.claude' / 'hooks'
        self.templates_dir = self.repo_dir / 'templates'

        # Configuration file paths
        self.user_settings = Path.home() / '.claude' / 'settings.json'
        self.user_local_settings = Path.home() / '.claude' / 'settings.local.json'
        self.project_settings = Path.cwd() / '.claude' / 'settings.json'
        self.project_local_settings = Path.cwd() / '.claude' / 'settings.local.json'

    def print_header(self, text: str):
        """Print a formatted header"""
        print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.CYAN}{text.center(70)}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.CYAN}{'='*70}{Colors.END}\n")

    def print_success(self, text: str):
        """Print success message"""
        print(f"{Colors.GREEN}✅ {text}{Colors.END}")

    def print_warning(self, text: str):
        """Print warning message"""
        print(f"{Colors.YELLOW}⚠️  {text}{Colors.END}")

    def print_error(self, text: str):
        """Print error message"""
        print(f"{Colors.RED}❌ {text}{Colors.END}")

    def print_info(self, text: str):
        """Print info message"""
        print(f"{Colors.BLUE}ℹ️  {text}{Colors.END}")

    # === HOOKS MANAGEMENT ===

    def install_hooks(self, target: Optional[str] = None, dry_run: bool = False):
        """Install hooks to ~/.claude/hooks/ or custom directory"""
        self.print_header("Installing Claude Code Hooks")

        if not self.hooks_dir.exists():
            self.print_error(f"Hooks directory not found: {self.hooks_dir}")
            self.print_info("Make sure you're running from a valid installation")
            return False

        target_dir = Path(target) if target else Path.home() / '.claude' / 'hooks'

        self.print_info(f"Target directory: {target_dir}")

        if dry_run:
            self.print_warning("DRY RUN - No files will be copied")
        else:
            target_dir.mkdir(parents=True, exist_ok=True)

        hooks = list(self.hooks_dir.glob('*.py'))
        if not hooks:
            self.print_warning("No hooks found to install")
            return False

        print(f"\n{Colors.BOLD}Installing {len(hooks)} hooks:{Colors.END}\n")

        for hook in sorted(hooks):
            if dry_run:
                print(f"  Would install: {hook.name}")
            else:
                target_file = target_dir / hook.name
                shutil.copy2(hook, target_file)
                # Make executable (Unix-like systems)
                if os.name != 'nt':
                    os.chmod(target_file, 0o755)
                self.print_success(f"Installed {hook.name}")

        if not dry_run:
            print(f"\n{Colors.GREEN}{Colors.BOLD}🎉 Installed {len(hooks)} hooks to {target_dir}{Colors.END}")
            self.print_info("\nTo enable hooks, add to your settings.json:")
            print(f'{Colors.BLUE}  "hooks": {{{Colors.END}')
            for hook in sorted(hooks):
                hook_name = hook.stem
                print(f'{Colors.BLUE}    "{hook_name}": {{"enabled": true}},{Colors.END}')
            print(f'{Colors.BLUE}  }}{Colors.END}')

        return True

    def list_hooks(self):
        """List available hooks"""
        self.print_header("Available Claude Code Hooks")

        if not self.hooks_dir.exists():
            self.print_error(f"Hooks directory not found: {self.hooks_dir}")
            return False

        hooks = sorted(self.hooks_dir.glob('*.py'))

        if not hooks:
            self.print_warning("No hooks found")
            return False

        print(f"{Colors.BOLD}Found {len(hooks)} hooks:{Colors.END}\n")

        for hook in hooks:
            # Try to extract description from hook file
            description = self._get_hook_description(hook)
            print(f"  {Colors.GREEN}•{Colors.END} {Colors.BOLD}{hook.name}{Colors.END}")
            if description:
                print(f"    {Colors.BLUE}{description}{Colors.END}")

        print(f"\n{Colors.CYAN}Install hooks:{Colors.END} claude-config install-hooks")
        return True

    def _get_hook_description(self, hook_path: Path) -> Optional[str]:
        """Extract description from hook file docstring"""
        try:
            with open(hook_path) as f:
                lines = f.readlines()
                # Look for docstring in first 10 lines
                in_docstring = False
                for line in lines[:10]:
                    if '"""' in line or "'''" in line:
                        if in_docstring:
                            return None  # End of docstring
                        in_docstring = True
                        # Try to get description from same line
                        content = line.split('"""')[1].split("'''")[0].strip()
                        if content and len(content) > 10:
                            return content[:100]
                    elif in_docstring:
                        content = line.strip()
                        if content and len(content) > 10:
                            return content[:100]
        except Exception:
            pass
        return None

    # === CONFIGURATION ===

    def init(self, target_dir: Optional[Path] = None):
        """Initialize .claude/ directory in current project"""
        self.print_header("Initialize Claude Code Configuration")

        target = Path(target_dir) if target_dir else Path.cwd()
        claude_dir = target / '.claude'

        if claude_dir.exists():
            self.print_warning(f"Claude configuration already exists at {claude_dir}")
            try:
                response = input("Continue anyway? (y/n): ")
                if response.lower() != 'y':
                    return False
            except (EOFError, KeyboardInterrupt):
                print()
                return False

        self.print_info("Creating .claude directory structure...")
        claude_dir.mkdir(parents=True, exist_ok=True)

        # Create basic settings.json template
        settings_file = claude_dir / 'settings.json'
        if not settings_file.exists():
            settings = {
                "plugin": {
                    "marketplaces": [
                        {
                            "name": "grey-haven-plugins",
                            "source": "REPLACE_WITH_ABSOLUTE_PATH/grey-haven-plugins"
                        }
                    ],
                    "install": []
                }
            }
            with open(settings_file, 'w') as f:
                json.dump(settings, f, indent=2)
            self.print_success(f"Created {settings_file}")

        # Create CLAUDE.md
        claude_md = claude_dir / 'CLAUDE.md'
        if not claude_md.exists():
            with open(claude_md, 'w') as f:
                f.write(f"""# CLAUDE.md

Project initialized on {datetime.now().strftime('%Y-%m-%d')}

## Project Overview
[Describe your project here]

## Development Guidelines
[Add project-specific guidelines for Claude Code]
""")
            self.print_success(f"Created {claude_md}")

        self.print_success(f"\nInitialized Claude Code configuration at {claude_dir}")
        self.print_info("\nNext steps:")
        print(f"  1. Clone plugins: git clone https://github.com/greyhaven-ai/grey-haven-claude-code-config.git")
        print(f"  2. Update settings.json with absolute path to grey-haven-plugins/")
        print(f"  3. Install hooks: claude-config install-hooks")

        return True

    def backup_settings(self):
        """Backup user settings to timestamped file"""
        self.print_header("Backup Settings")

        if not self.user_settings.exists():
            self.print_error(f"Settings file not found: {self.user_settings}")
            return False

        backup_dir = Path.home() / '.claude' / 'backups'
        backup_dir.mkdir(parents=True, exist_ok=True)

        timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
        backup_file = backup_dir / f'settings-{timestamp}.json'

        shutil.copy2(self.user_settings, backup_file)
        self.print_success(f"Backed up settings to {backup_file}")

        return True

    def restore_settings(self, backup_file: str):
        """Restore settings from backup"""
        self.print_header("Restore Settings")

        backup_path = Path(backup_file)
        if not backup_path.exists():
            self.print_error(f"Backup file not found: {backup_file}")
            return False

        try:
            # Validate JSON
            with open(backup_path) as f:
                json.load(f)
        except json.JSONDecodeError:
            self.print_error(f"Invalid JSON in backup file: {backup_file}")
            return False

        # Backup current settings first
        if self.user_settings.exists():
            self.backup_settings()

        shutil.copy2(backup_path, self.user_settings)
        self.print_success(f"Restored settings from {backup_file}")

        return True

    # === DIAGNOSTICS ===

    def doctor(self):
        """Diagnose installation and configuration"""
        self.print_header("Claude Config Doctor")

        checks = {
            "Python 3 installed": self._check_python(),
            "Node.js installed": self._check_node(),
            "Hooks installed": self._check_hooks(),
            "User settings.json exists": self._check_settings(),
            "Plugin marketplace configured": self._check_marketplace(),
        }

        all_pass = True
        for check, result in checks.items():
            status = f"{Colors.GREEN}✅{Colors.END}" if result else f"{Colors.RED}❌{Colors.END}"
            print(f"{status} {check}")
            if not result:
                all_pass = False

        print()

        if all_pass:
            self.print_success("All checks passed!")
        else:
            self.print_warning("Some checks failed. See recommendations below:")

            if not checks["Python 3 installed"]:
                print(f"\n  {Colors.YELLOW}Python 3:{Colors.END}")
                print(f"    macOS:   brew install python3")
                print(f"    Ubuntu:  sudo apt-get install python3")

            if not checks["Node.js installed"]:
                print(f"\n  {Colors.YELLOW}Node.js:{Colors.END}")
                print(f"    macOS:   brew install node")
                print(f"    Ubuntu:  sudo apt-get install nodejs npm")

            if not checks["Hooks installed"]:
                print(f"\n  {Colors.YELLOW}Hooks:{Colors.END}")
                print(f"    Run: claude-config install-hooks")

            if not checks["User settings.json exists"]:
                print(f"\n  {Colors.YELLOW}Settings:{Colors.END}")
                print(f"    Create: ~/.claude/settings.json")

            if not checks["Plugin marketplace configured"]:
                print(f"\n  {Colors.YELLOW}Plugin Marketplace:{Colors.END}")
                print(f"    1. Clone: git clone https://github.com/greyhaven-ai/grey-haven-claude-code-config.git")
                print(f"    2. Add to settings.json:")
                print(f'       {{"plugin": {{"marketplaces": [{{"source": "/path/to/grey-haven-plugins"}}]}}}}')

        return all_pass

    def _check_python(self) -> bool:
        """Check if Python 3 is installed"""
        try:
            result = subprocess.run(['python3', '--version'], capture_output=True, text=True)
            return result.returncode == 0 and 'Python 3' in result.stdout
        except FileNotFoundError:
            return False

    def _check_node(self) -> bool:
        """Check if Node.js is installed"""
        try:
            result = subprocess.run(['node', '--version'], capture_output=True)
            return result.returncode == 0
        except FileNotFoundError:
            return False

    def _check_hooks(self) -> bool:
        """Check if hooks are installed"""
        hooks_dir = Path.home() / '.claude' / 'hooks'
        return hooks_dir.exists() and len(list(hooks_dir.glob('*.py'))) > 0

    def _check_settings(self) -> bool:
        """Check if settings.json exists and is valid JSON"""
        if not self.user_settings.exists():
            return False
        try:
            with open(self.user_settings) as f:
                json.load(f)
            return True
        except json.JSONDecodeError:
            return False

    def _check_marketplace(self) -> bool:
        """Check if plugin marketplace is configured"""
        try:
            with open(self.user_settings) as f:
                settings = json.load(f)
                return 'plugin' in settings and 'marketplaces' in settings['plugin']
        except:
            return False

    # === VERSION INFO ===

    def show_version(self):
        """Show version information"""
        print(f"{Colors.BOLD}{Colors.CYAN}Claude Config{Colors.END} v{VERSION}")
        print(f"\nHooks and configuration setup for Grey Haven's Claude Code environment")
        print(f"\nRepository: https://github.com/greyhaven-ai/grey-haven-claude-code-config")
        print(f"npm: https://www.npmjs.com/package/@greyhaven/claude-code-config")

    def self_update(self):
        """Update to latest version via npm"""
        self.print_header("Self Update")

        self.print_info("Updating @greyhaven/claude-code-config from npm...")

        try:
            result = subprocess.run(
                ['npm', 'update', '-g', '@greyhaven/claude-code-config'],
                capture_output=True,
                text=True
            )

            if result.returncode == 0:
                self.print_success("Successfully updated claude-config!")
                self.print_info("Run 'claude-config --version' to verify")
            else:
                self.print_error("Update failed")
                print(f"\n{result.stderr}")
                self.print_info("\nTry manually:")
                print(f"  npm update -g @greyhaven/claude-code-config")
        except FileNotFoundError:
            self.print_error("npm not found")
            self.print_info("Install Node.js first: https://nodejs.org/")


def main():
    """Main entry point"""
    manager = ClaudeConfigManager()

    parser = argparse.ArgumentParser(
        description='Claude Config v2.0.0 - Hooks and Configuration Setup',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
{Colors.BOLD}Examples:{Colors.END}
  claude-config install-hooks              Install hooks to ~/.claude/hooks/
  claude-config list-hooks                 Show available hooks
  claude-config init                       Initialize .claude/ directory
  claude-config doctor                     Diagnose installation
  claude-config backup-settings            Backup user settings

{Colors.BOLD}Plugin Marketplace:{Colors.END}
  For agents and commands, use Git + plugin marketplace:

  1. Clone repository:
     git clone https://github.com/greyhaven-ai/grey-haven-claude-code-config.git

  2. Add to ~/.claude/settings.json:
     {{
       "plugin": {{
         "marketplaces": [{{
           "source": "/path/to/grey-haven-claude-code-config/grey-haven-plugins"
         }}]
       }}
     }}

{Colors.BOLD}Documentation:{Colors.END}
  Migration Guide: https://github.com/greyhaven-ai/grey-haven-claude-code-config/blob/main/MIGRATION_V2.md

{Colors.BOLD}Version:{Colors.END} {VERSION}
"""
    )

    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # install-hooks
    install_parser = subparsers.add_parser('install-hooks', help='Install hooks to ~/.claude/hooks/')
    install_parser.add_argument('--target', help='Custom target directory')
    install_parser.add_argument('--dry-run', action='store_true', help='Show what would be installed')

    # list-hooks
    subparsers.add_parser('list-hooks', help='List available hooks')

    # init
    init_parser = subparsers.add_parser('init', help='Initialize .claude/ directory')
    init_parser.add_argument('--target', help='Target directory (default: current directory)')

    # backup-settings
    subparsers.add_parser('backup-settings', help='Backup user settings')

    # restore-settings
    restore_parser = subparsers.add_parser('restore-settings', help='Restore settings from backup')
    restore_parser.add_argument('backup_file', help='Path to backup file')

    # doctor
    subparsers.add_parser('doctor', help='Diagnose installation and configuration')

    # self-update
    subparsers.add_parser('self-update', help='Update to latest version via npm')

    # version
    subparsers.add_parser('version', help='Show version information')

    # Parse arguments
    args = parser.parse_args()

    # Handle version/help special cases
    if not args.command or args.command == 'version':
        manager.show_version()
        return 0

    # Execute command
    try:
        if args.command == 'install-hooks':
            success = manager.install_hooks(args.target, args.dry_run)
        elif args.command == 'list-hooks':
            success = manager.list_hooks()
        elif args.command == 'init':
            success = manager.init(args.target)
        elif args.command == 'backup-settings':
            success = manager.backup_settings()
        elif args.command == 'restore-settings':
            success = manager.restore_settings(args.backup_file)
        elif args.command == 'doctor':
            success = manager.doctor()
        elif args.command == 'self-update':
            success = manager.self_update()
        else:
            parser.print_help()
            return 1

        return 0 if success else 1

    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}Interrupted by user{Colors.END}")
        return 130
    except Exception as e:
        print(f"\n{Colors.RED}Error: {e}{Colors.END}", file=sys.stderr)
        return 1


if __name__ == '__main__':
    sys.exit(main())
